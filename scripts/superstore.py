# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I-1YekIq0UCI47HQopFxCDCruoYWJYbv
"""

# Cell 1 — Install & Imports
import os

# Install required packages (works in normal Python scripts)
os.system("pip install plotly pandas seaborn matplotlib kaleido")

import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import os
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from IPython.display import display, HTML

# plotting defaults
plt.rcParams['figure.figsize'] = (12,5)
sns.set_theme(style='whitegrid')

# Cell 2 — Load dataset (adjust path if needed)
DATA_PATH = '/content/Superstore.csv'   # <-- your confirmed path

# existence check
if not os.path.exists(DATA_PATH):
    raise FileNotFoundError(f"File not found at {DATA_PATH}. Upload or change path.")

df = pd.read_csv(DATA_PATH, low_memory=False, encoding='latin1')
print("Loaded dataset shape:", df.shape)
df.head()

# Cell 3 — Inspect & basic info
print("Columns:", df.columns.tolist())
print("\nData types:\n", df.dtypes)
print("\nMissing values:\n", df.isnull().sum())
print("\nDuplicate rows:", df.duplicated().sum())

# show sample rows
display(df.sample(5, random_state=42))

# Cell 4 — Clean & convert types
# Trim column names
df.columns = [c.strip() for c in df.columns]

# Convert date columns if present
for col in ['Order Date', 'Ship Date', 'OrderDate', 'ShipDate']:
    if col in df.columns:
        df[col] = pd.to_datetime(df[col], errors='coerce')

# Unified names
if 'Order Date' in df.columns:
    df['OrderDate'] = df['Order Date']
if 'Ship Date' in df.columns:
    df['ShipDate'] = df['Ship Date']

# Numeric conversions (remove $ , etc.)
for col in ['Sales','Profit','Quantity','Discount']:
    if col in df.columns:
        df[col] = (df[col].astype(str)
                          .str.replace(r'[\$,]', '', regex=True)
                          .replace('', np.nan))
        df[col] = pd.to_numeric(df[col], errors='coerce')

# Drop exact duplicate rows
df = df.drop_duplicates().reset_index(drop=True)

print("After cleaning shape:", df.shape)
df.info()

# Cell 5 — Feature engineering
# Time features
if 'OrderDate' in df.columns:
    df['Year'] = df['OrderDate'].dt.year
    df['Month'] = df['OrderDate'].dt.month
    df['MonthName'] = df['OrderDate'].dt.strftime('%b')
    df['OrderQuarter'] = df['OrderDate'].dt.to_period('Q').astype(str)
else:
    print("OrderDate not found — time features skipped.")

# Profit margin
if set(['Sales','Profit']).issubset(df.columns):
    df['ProfitMargin'] = df['Profit'] / df['Sales']
    df['ProfitMargin'] = df['ProfitMargin'].replace([np.inf, -np.inf], np.nan)

# Basic RFM if Customer ID exists
if 'Customer ID' in df.columns and 'OrderDate' in df.columns:
    snapshot_date = df['OrderDate'].max() + pd.Timedelta(days=1)
    recency = df.groupby('Customer ID')['OrderDate'].max().apply(lambda d: (snapshot_date - d).days)
    frequency = df.groupby('Customer ID')['Order ID'].nunique() if 'Order ID' in df.columns else df.groupby('Customer ID').size()
    monetary = df.groupby('Customer ID')['Sales'].sum()
    rfm = pd.concat([recency, frequency, monetary], axis=1).reset_index()
    rfm.columns = ['Customer ID','Recency','Frequency','Monetary']
    display(rfm.head())

# Cell 6 — Summary KPIs
total_sales = df['Sales'].sum() if 'Sales' in df.columns else 0
total_profit = df['Profit'].sum() if 'Profit' in df.columns else 0
total_qty = int(df['Quantity'].sum()) if 'Quantity' in df.columns else np.nan

# Approx average order value
if 'Order ID' in df.columns:
    avg_order_value = df.groupby('Order ID')['Sales'].sum().mean()
else:
    avg_order_value = df['Sales'].mean() if 'Sales' in df.columns else 0

print("Total sales: ${:,.2f}".format(total_sales))
print("Total profit: ${:,.2f}".format(total_profit))
print("Total quantity sold:", total_qty)
print("Avg order value (approx): ${:,.2f}".format(avg_order_value if not pd.isna(avg_order_value) else 0))

# KPI HTML display
kpi_html = f"""
<div style="display:flex;gap:20px;font-family: Arial; margin: 8px 0;">
  <div style="padding:12px;border-radius:8px;background:#f7f9fc;">
    <div style="font-size:12px;color:#666;">Total Sales</div>
    <div style="font-size:20px;font-weight:700">${total_sales:,.0f}</div>
  </div>
  <div style="padding:12px;border-radius:8px;background:#f7f9fc;">
    <div style="font-size:12px;color:#666;">Total Profit</div>
    <div style="font-size:20px;font-weight:700">${total_profit:,.0f}</div>
  </div>
  <div style="padding:12px;border-radius:8px;background:#f7f9fc;">
    <div style="font-size:12px;color:#666;">Total Quantity</div>
    <div style="font-size:20px;font-weight:700">{total_qty}</div>
  </div>
  <div style="padding:12px;border-radius:8px;background:#f7f9fc;">
    <div style="font-size:12px;color:#666;">Avg Order Value</div>
    <div style="font-size:20px;font-weight:700">${avg_order_value:,.2f}</div>
  </div>
</div>
"""
display(HTML(kpi_html))

# Cell 7 — Correlation & distributions
num_cols = ['Sales','Profit','Discount','Quantity','ProfitMargin']
present_num_cols = [c for c in num_cols if c in df.columns]

if present_num_cols:
    plt.figure(figsize=(8,6))
    sns.heatmap(df[present_num_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
    plt.title("Correlation Between Numeric Variables")
    plt.show()

    for c in ['Sales','Profit','Discount']:
        if c in df.columns:
            plt.figure(figsize=(8,3))
            sns.histplot(df[c].dropna(), bins=50, kde=True)
            plt.title(f"Distribution: {c}")
            plt.show()

# Cell 8 — Sales trend over time (static)
if 'OrderDate' in df.columns:
    daily = df.groupby('OrderDate')['Sales'].sum().reset_index()
    plt.figure(figsize=(14,4))
    plt.plot(daily['OrderDate'], daily['Sales'], linewidth=1)
    plt.title("Daily Sales Over Time")
    plt.xlabel("Order Date")
    plt.ylabel("Sales ($)")
    plt.tight_layout()
    plt.show()
else:
    print("OrderDate missing — sales trend skipped.")

# Cell 9 — Category & Region analysis
if 'Category' in df.columns:
    cat = df.groupby('Category')[['Sales','Profit']].sum().sort_values('Sales', ascending=False)
    ax = cat.plot(kind='bar', rot=0)
    ax.set_ylabel("Amount")
    plt.title("Sales and Profit by Category")
    plt.show()

if 'Region' in df.columns:
    region = df.groupby('Region')[['Sales','Profit']].sum().sort_values('Sales', ascending=False)
    region.plot(kind='bar')
    plt.title("Sales & Profit by Region")
    plt.show()

# Cell 10 — Top & bottom products
if 'Product Name' in df.columns and 'Sales' in df.columns:
    top10 = df.groupby('Product Name')['Sales'].sum().sort_values(ascending=False).head(10)
    bottom10 = df.groupby('Product Name')['Sales'].sum().sort_values(ascending=True).head(10)
    print("Top 10 products by sales:")
    display(top10)
    print("Bottom 10 products by sales:")
    display(bottom10)

    # plot top 10
    top10.sort_values().plot(kind='barh')
    plt.title("Top 10 Products by Sales")
    plt.xlabel("Sales")
    plt.show()
else:
    print("Product Name or Sales column missing — skipping product analysis.")

# Cell 11 — Discount vs Profit
if set(['Discount','Profit']).issubset(df.columns):
    plt.figure(figsize=(8,5))
    sns.scatterplot(data=df, x='Discount', y='Profit', alpha=0.6)
    plt.title("Discount vs Profit")
    plt.show()
else:
    print("Discount or Profit column missing — skipping scatter.")

# Cell 12 — Interactive Plotly visualizations
# Sales by Region (bar)
if 'Region' in df.columns:
    fig_region = px.bar(df.groupby('Region', as_index=False)['Sales'].sum().sort_values('Sales', ascending=False),
                 x='Region', y='Sales', title='Total Sales by Region', text_auto=True)
    fig_region.update_layout(margin=dict(l=20,r=20,t=40,b=20))
    fig_region.show()

# Treemap Category/Sub-Category
if set(['Category','Sub-Category','Sales']).issubset(df.columns):
    fig_treemap = px.treemap(df, path=['Category','Sub-Category'], values='Sales', title='Sales by Category/Sub-Category')
    fig_treemap.show()

# Monthly sales line with range slider
if 'OrderDate' in df.columns:
    monthly = df.set_index('OrderDate').resample('M')['Sales'].sum().reset_index()
    fig_monthly = px.line(monthly, x='OrderDate', y='Sales', title='Monthly Sales Trend')
    fig_monthly.update_xaxes(rangeslider_visible=True)
    fig_monthly.show()

# Cell 13 — Choropleth by State (US) — may need state abbreviations
if 'State' in df.columns and 'Profit' in df.columns:
    try:
        state_profit = df.groupby('State', as_index=False)['Profit'].sum()
        fig_state = px.choropleth(state_profit, locations='State', locationmode='USA-states',
                                  color='Profit', scope='usa', title='Profit by State')
        fig_state.show()
    except Exception as e:
        print("Choropleth failed (likely state name/abbrev mismatch). Error:", e)
else:
    print("State or Profit column missing — skipping choropleth.")

# Cell 14 — Combined interactive dashboard (summary)
fig = make_subplots(rows=2, cols=2,
                    subplot_titles=("Monthly Sales","Sales by Region","Top Products (Sales)","Discount vs Profit"),
                    vertical_spacing=0.12)

# Monthly Sales
if 'OrderDate' in df.columns:
    monthly = df.set_index('OrderDate').resample('M')['Sales'].sum().reset_index()
    fig.add_trace(go.Scatter(x=monthly['OrderDate'], y=monthly['Sales'], name='Monthly Sales'), row=1, col=1)

# Sales by Region
if 'Region' in df.columns:
    region_df = df.groupby('Region', as_index=False)['Sales'].sum().sort_values('Sales', ascending=False)
    fig.add_trace(go.Bar(x=region_df['Region'], y=region_df['Sales'], name='Sales by Region'), row=1, col=2)

# Top Products
if 'Product Name' in df.columns:
    top10 = df.groupby('Product Name')['Sales'].sum().sort_values(ascending=False).head(8).reset_index()
    fig.add_trace(go.Bar(x=top10['Sales'][::-1], y=top10['Product Name'][::-1], orientation='h', name='Top Products'), row=2, col=1)

# Discount vs Profit
if set(['Discount','Profit']).issubset(df.columns):
    fig.add_trace(go.Scatter(x=df['Discount'], y=df['Profit'], mode='markers', name='Discount vs Profit', marker=dict(size=6, opacity=0.6)), row=2, col=2)

fig.update_layout(height=800, showlegend=False, title_text="Superstore — Summary Dashboard")
fig.show()

# Cell 15 — Export interactive chart and cleaned data
out_html = "/content/superstore_dashboard.html"
try:
    fig.write_html(out_html, include_plotlyjs='cdn')
    print("Saved combined dashboard to:", out_html)
except Exception as e:
    print("Failed to save HTML:", e)

clean_path = "/content/superstore_cleaned.csv"
df.to_csv(clean_path, index=False)
print("Saved cleaned dataset to:", clean_path)

# If you want immediate download in Colab, uncomment below:
# from google.colab import files
# files.download(out_html)
# files.download(clean_path)

# Cell 16 — Quick insights (customizable)
if 'Category' in df.columns and 'Profit' in df.columns:
    best_cat = df.groupby('Category')['Profit'].sum().idxmax()
    worst_cat = df.groupby('Category')['Profit'].sum().idxmin()
    print(f"Most profitable category: {best_cat}")
    print(f"Least profitable category: {worst_cat}")

if 'Region' in df.columns:
    top_region = df.groupby('Region')['Sales'].sum().idxmax()
    print(f"Top region by sales: {top_region}")

print("\nNotebook run complete. Review the visualizations above and tweak filters/time windows as required.")

import os
os.system("pip install --quiet streamlit pandas plotly pyngrok")


# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# import plotly.graph_objects as go
# from io import BytesIO
# from plotly.subplots import make_subplots
# 
# 
# # Streamlit page setup
# st.set_page_config(page_title="📊 Superstore Sales Dashboard", layout="wide")
# 
# # -------------------------------
# # LOAD DATA
# # -------------------------------
# @st.cache_data
# def load_data():
#     try:
#         df = pd.read_csv("/content/Superstore.csv", encoding='utf-8')
#     except UnicodeDecodeError:
#         df = pd.read_csv("/content/Superstore.csv", encoding='latin-1')
# 
#     df.columns = [c.strip() for c in df.columns]
# 
#     # Convert dates and create derived columns
#     if 'Order Date' in df.columns:
#         df['Order Date'] = pd.to_datetime(df['Order Date'], errors='coerce')
#     if 'Ship Date' in df.columns:
#         df['Ship Date'] = pd.to_datetime(df['Ship Date'], errors='coerce')
#     if 'Profit' in df.columns and 'Sales' in df.columns:
#         df['ProfitMargin'] = df['Profit'] / df['Sales']
# 
#     return df
# 
# df = load_data()
# 
# # -------------------------------
# # SIDEBAR FILTERS
# # -------------------------------
# st.sidebar.header("🔍 Filters")
# 
# regions = df['Region'].dropna().unique().tolist() if 'Region' in df.columns else []
# categories = df['Category'].dropna().unique().tolist() if 'Category' in df.columns else []
# sub_categories = df['Sub-Category'].dropna().unique().tolist() if 'Sub-Category' in df.columns else []
# 
# selected_region = st.sidebar.multiselect("Select Region(s)", regions, default=regions)
# selected_category = st.sidebar.multiselect("Select Category(s)", categories, default=categories)
# selected_sub_category = st.sidebar.multiselect("Select Sub-Category(s)", sub_categories, default=sub_categories)
# 
# if 'Order Date' in df.columns:
#     min_date, max_date = df['Order Date'].min(), df['Order Date'].max()
#     date_range = st.sidebar.date_input("Select Date Range", [min_date, max_date])
# 
# # -------------------------------
# # FILTER DATA
# # -------------------------------
# filtered_df = df.copy()
# 
# if 'Region' in filtered_df.columns and selected_region:
#     filtered_df = filtered_df[filtered_df['Region'].isin(selected_region)]
# if 'Category' in filtered_df.columns and selected_category:
#     filtered_df = filtered_df[filtered_df['Category'].isin(selected_category)]
# if 'Sub-Category' in filtered_df.columns and selected_sub_category:
#     filtered_df = filtered_df[filtered_df['Sub-Category'].isin(selected_sub_category)]
# 
# if 'Order Date' in filtered_df.columns and len(date_range) == 2:
#     start_date, end_date = date_range
#     filtered_df = filtered_df[
#         (filtered_df['Order Date'] >= pd.to_datetime(start_date)) &
#         (filtered_df['Order Date'] <= pd.to_datetime(end_date))
#     ]
# 
# # -------------------------------
# # DASHBOARD HEADER
# # -------------------------------
# st.title("📈 Superstore Sales Dashboard")
# 
# total_sales = filtered_df['Sales'].sum() if 'Sales' in filtered_df.columns else 0
# total_profit = filtered_df['Profit'].sum() if 'Profit' in filtered_df.columns else 0
# avg_margin = filtered_df['ProfitMargin'].mean() * 100 if 'ProfitMargin' in filtered_df.columns else 0
# 
# col1, col2, col3 = st.columns(3)
# col1.metric("💰 Total Sales", f"${total_sales:,.0f}")
# col2.metric("📊 Total Profit", f"${total_profit:,.0f}")
# col3.metric("📈 Avg Profit Margin", f"{avg_margin:.2f}%")
# 
# st.markdown("---")
# 
# # -------------------------------
# # CHARTS
# # -------------------------------
# 
# # Combined interactive dashboard (summary)
# fig = make_subplots(rows=2, cols=2,
#                     subplot_titles=("Monthly Sales","Sales by Region","Top Products (Sales)","Discount vs Profit"),
#                     vertical_spacing=0.12)
# 
# # Monthly Sales
# if 'Order Date' in filtered_df.columns:
#     monthly = filtered_df.set_index('Order Date').resample('M')['Sales'].sum().reset_index()
#     fig.add_trace(go.Scatter(x=monthly['Order Date'], y=monthly['Sales'], name='Monthly Sales'), row=1, col=1)
# 
# # Sales by Region
# if 'Region' in filtered_df.columns:
#     region_df = filtered_df.groupby('Region', as_index=False)['Sales'].sum().sort_values('Sales', ascending=False)
#     fig.add_trace(go.Bar(x=region_df['Region'], y=region_df['Sales'], name='Sales by Region'), row=1, col=2)
# 
# # Top Products
# if 'Product Name' in filtered_df.columns and 'Sales' in filtered_df.columns:
#     top10 = filtered_df.groupby('Product Name')['Sales'].sum().sort_values(ascending=False).head(8).reset_index()
#     fig.add_trace(go.Bar(x=top10['Sales'][::-1], y=top10['Product Name'][::-1], orientation='h', name='Top Products'), row=2, col=1)
# 
# # Discount vs Profit
# if set(['Discount','Profit']).issubset(filtered_df.columns):
#     fig.add_trace(go.Scatter(x=filtered_df['Discount'], y=filtered_df['Profit'], mode='markers', name='Discount vs Profit', marker=dict(size=6, opacity=0.6)), row=2, col=2)
# 
# fig.update_layout(height=800, showlegend=False, title_text="Superstore — Summary Dashboard")
# st.plotly_chart(fig, use_container_width=True)
# 
# 
# # Sales over time
# st.subheader("📅 Sales Over Time")
# if 'Order Date' in filtered_df.columns:
#     trend = filtered_df.groupby('Order Date')[['Sales']].sum().reset_index()
#     fig1 = px.line(trend, x='Order Date', y='Sales', markers=True, title="Sales Trend")
#     st.plotly_chart(fig1, use_container_width=True)
# 
# # Sales by Region
# st.subheader("🏙️ Sales by Region")
# if 'Region' in filtered_df.columns:
#     region_sales = filtered_df.groupby('Region')['Sales'].sum().reset_index()
#     fig2 = px.bar(region_sales, x='Region', y='Sales', color='Region', title="Sales by Region")
#     st.plotly_chart(fig2, use_container_width=True)
# 
# # Top 10 Products
# st.subheader("🛍️ Top 10 Products by Sales")
# if 'Product Name' in filtered_df.columns:
#     top_products = filtered_df.groupby('Product Name')['Sales'].sum().nlargest(10).reset_index()
#     fig3 = px.bar(top_products, x='Sales', y='Product Name', orientation='h',
#                   title="Top 10 Products", color='Sales')
#     st.plotly_chart(fig3, use_container_width=True)
# 
# # Profit treemap
# st.subheader("💸 Profit by Category and Sub-Category")
# if 'Category' in filtered_df.columns and 'Sub-Category' in filtered_df.columns:
#     cat_profit = filtered_df.groupby(['Category', 'Sub-Category'])['Profit'].sum().reset_index()
#     fig4 = px.treemap(cat_profit, path=['Category', 'Sub-Category'], values='Profit', title="Profit Distribution")
#     st.plotly_chart(fig4, use_container_width=True)
# 
# st.markdown("---")
# 
# # -------------------------------
# # DATA VIEWER + DOWNLOADS
# # -------------------------------
# with st.expander("🔎 View Filtered Data"):
#     st.dataframe(filtered_df, use_container_width=True)
# 
#     # CSV
#     csv = filtered_df.to_csv(index=False).encode('utf-8')
#     st.download_button(
#         label="⬇️ Download CSV",
#         data=csv,
#         file_name="Filtered_Superstore_Data.csv",
#         mime="text/csv"
#     )
# 
#     # Excel
#     buffer = BytesIO()
#     with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
#         filtered_df.to_excel(writer, index=False, sheet_name='Filtered Data')
#     st.download_button(
#         label="⬇️ Download Excel",
#         data=buffer.getvalue(),
#         file_name="Filtered_Superstore_Data.xlsx",
#         mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#     )
# 
# st.caption("📊 Built with Streamlit | Data: Superstore Dataset | Interactive Dashboard")

os.system("pip install --quiet xlsxwriter openpyxl")

import xlsxwriter
import openpyxl
print("✅ Excel libraries installed successfully!")

import os
os.system("pip uninstall prophet -y")

import os
os.system("pip install --quiet prophet==1.1.5")
os.system("pip install --quiet cmdstanpy==1.2.0")

# ---------------- FORECAST MODEL (fallback) ----------------
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import plotly.graph_objects as go # Ensure go is imported

# st.subheader("⏱️ 30-Day Sales Forecast (Exponential Smoothing)") # Remove Streamlit command

forecast_df = df.groupby("Order Date")[["Sales"]].sum().reset_index()
if len(forecast_df) > 20:
    model = ExponentialSmoothing(forecast_df["Sales"], trend="add", seasonal=None)
    fit = model.fit()
    forecast = fit.forecast(30)
    forecast_dates = pd.date_range(forecast_df["Order Date"].max(), periods=30, freq="D")

    fig = go.Figure() # Use fig instead of fig2 to avoid confusion with app.py
    fig.add_trace(go.Scatter(x=forecast_df["Order Date"], y=forecast_df["Sales"], name="Actual Sales"))
    fig.add_trace(go.Scatter(x=forecast_dates, y=forecast, name="Forecast", line=dict(dash="dot")))
    fig.update_layout(title="30-Day Sales Forecast", xaxis_title="Date", yaxis_title="Sales")
    fig.show() # Use fig.show() to display in Colab

else:
    # st.warning("Not enough data for forecast.") # Remove Streamlit command
    print("Not enough data for forecast.") # Use print for Colab output

# Attempt to install potentially compatible versions of prophet and cmdstanpy
import os
os.system("pip install --upgrade --quiet prophet")
os.system("pip install --upgrade --quiet cmdstanpy")

import os
os.system("pip install --upgrade --quiet prophet cmdstanpy")

import os
os.system("ngrok config add-authtoken 32gRbNQaBQj70TVZ7RLVYhb1SMP_4BamL47uvBsCk6CrHGvJ7")

from pyngrok import ngrok
import os

# Kill any existing tunnels
ngrok.kill()

# Start a new tunnel for port 8501
public_url = ngrok.connect(8501)
print("🌍 Public App URL:", public_url)

# Launch Streamlit app in background silently
os.system("streamlit run app.py --server.port 8501 > /dev/null 2>&1 &")
